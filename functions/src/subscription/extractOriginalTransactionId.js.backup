// 📁 functions/src/subscription/extractOriginalTransactionId.js
const {onCall, HttpsError} = require("firebase-functions/v2/https");
const admin = require("firebase-admin");
const axios = require("axios");
const { APP_STORE_SERVER_API_URL } = require('../shared/constant');
const { generateServerJWT } = require('../utils/jwt');

/**
 * transactionId로 originalTransactionId를 추출하는 함수 (App Store Server API v2 사용)
 */
const extractOriginalTransactionId = onCall({
  region: "asia-southeast1",
}, async (request) => {
  try {
    console.log("🔍 extractOriginalTransactionId 호출됨");
    console.log("📝 입력 데이터:", request.data);
    
    // 인증 확인
    if (!request.auth) {
      console.error("❌ 인증되지 않은 요청");
      throw new HttpsError('unauthenticated', 'Request must be authenticated');
    }

    const { transactionId, userId } = request.data;
    
    if (!transactionId || !userId) {
      console.error("❌ 필수 파라미터 누락:", { transactionId: !!transactionId, userId: !!userId });
      throw new HttpsError('invalid-argument', 'transactionId and userId are required');
    }

    // App Store Server API v2를 사용하여 transaction 정보 조회
    const transactionInfo = await getTransactionInfo(transactionId);
    
    if (!transactionInfo.success) {
      console.error("❌ Transaction 정보 조회 실패:", transactionInfo.error);
      throw new HttpsError('internal', 'Failed to get transaction info from App Store');
    }

    const originalTransactionId = transactionInfo.originalTransactionId;
    
    if (!originalTransactionId) {
      console.error("❌ originalTransactionId를 찾을 수 없음");
      throw new HttpsError('internal', 'originalTransactionId not found in transaction info');
    }

    // Firestore에 originalTransactionId 저장
    const db = admin.firestore();
    await db.collection('users').doc(userId).set({
      originalTransactionId: originalTransactionId,
      lastTransactionId: transactionId,
      lastTransactionInfoUpdateAt: admin.firestore.FieldValue.serverTimestamp()
    }, { merge: true });

    console.log("✅ originalTransactionId 저장 완료:", originalTransactionId);
    
    return {
      success: true,
      originalTransactionId: originalTransactionId
    };

  } catch (error) {
    console.error("❌ extractOriginalTransactionId 에러:", error);
    
    if (error instanceof HttpsError) {
      throw error;
    }
    
    throw new HttpsError('internal', 'Internal server error');
  }
});

/**
 * App Store Server API v2를 사용하여 transaction 정보 조회
 * @param {string} transactionId
 * @returns {Promise<{success: boolean, originalTransactionId?: string, error?: string}>}
 */
async function getTransactionInfo(transactionId) {
  try {
    console.log("🔍 App Store Server API v2로 transaction 정보 조회:", transactionId);
    
    const token = generateServerJWT();
    const apiUrl = `${APP_STORE_SERVER_API_URL}/inApps/v1/transactions/${transactionId}`;

    const response = await axios.get(apiUrl, {
      headers: {
        "Authorization": "Bearer " + token,
        "Content-Type": "application/json",
      },
      timeout: 10000,
    });

    const transactionData = response.data;
    const signedTransactionInfo = transactionData.signedTransactionInfo;
    
    if (!signedTransactionInfo) {
      console.error("❌ signedTransactionInfo가 없음");
      return { success: false, error: 'No signedTransactionInfo in response' };
    }

    // JWT 토큰 디코딩 (base64url decode)
    const payload = decodeJWT(signedTransactionInfo);
    
    if (!payload) {
      console.error("❌ JWT 토큰 디코딩 실패");
      return { success: false, error: 'Failed to decode JWT token' };
    }

    const originalTransactionId = payload.originalTransactionId;
    
    if (!originalTransactionId) {
      console.error("❌ originalTransactionId를 JWT payload에서 찾을 수 없음");
      return { success: false, error: 'originalTransactionId not found in JWT payload' };
    }

    console.log("✅ originalTransactionId 추출 성공:", originalTransactionId);
    
    return { 
      success: true, 
      originalTransactionId: originalTransactionId 
    };

  } catch (error) {
    console.error("❌ App Store Server API v2 호출 실패:", error.message);
    
    if (error.response) {
      console.error("❌ API 응답 에러:", error.response.status, error.response.data);
    }
    
    return { success: false, error: error.message };
  }
}

/**
 * JWT 토큰을 디코딩하는 함수 (base64url decode)
 * @param {string} token
 * @returns {Object|null}
 */
function decodeJWT(token) {
  try {
    // JWT는 header.payload.signature 형태
    const parts = token.split('.');
    if (parts.length !== 3) {
      console.error("❌ JWT 형식이 올바르지 않음");
      return null;
    }

    // payload 부분 디코딩 (base64url)
    const payload = parts[1];
    const decodedPayload = Buffer.from(payload, 'base64url').toString('utf8');
    
    return JSON.parse(decodedPayload);
  } catch (error) {
    console.error("❌ JWT 디코딩 에러:", error);
    return null;
  }
}

module.exports = { extractOriginalTransactionId };
